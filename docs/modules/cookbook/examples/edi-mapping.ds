local flattenItems(items, parent_id) =
  std.foldl(
    function(result, item) {
        objItems: result.objItems +
               [
                     {
                         index:: result.next_index,
                         "010_HL" : {
                            HL01: std.toString(result.next_index),
                            HL02: std.toString(parent_id),
                            HL03: "I"
                         },
                         "020_LIN": {
                            LIN01: item.POSNR,
                            LIN02: "SK",
                            LIN03: item.KDMAT_EXTERNAL,
                            LIN06: "CH",
                            LIN07: "CA"
                         },
                         "030_SN1": {
                            SN102: item.VEMNG,
                            SN103: item.VEMEH
                         }
                     }
               ],
        next_index: self.objItems[std.length(self.objItems) - 1].index + 1
    },
    items,
    {
        objItems: [],
        next_index: parent_id + 1
    }
);

local flattenOrders(orders, parent_id) =
  std.foldl(function(result, order) {
    objItems: result.objItems +
            [
                {
                    index:: result.next_index,
                    "010_HL" : {
                        HL01: std.toString(result.next_index),
                        HL02: std.toString(parent_id),
                        HL03: "O",
                    },
                    "050_PRF": [
                        {
                            PRF01: e1EDL41.BSTNR,
                            PRF02: e1EDL41.BSTDT
                        } for e1EDL41 in order.E1EDL41
                          if (e1EDL41.QUALI == "001")
                    ][0]
                }
            ],
    next_index: self.objItems[std.length(self.objItems) - 1].index + 1
  },
  orders,
  {
    objItems: [],
    next_index: parent_id + 1
  }
);

local flattenPackages(packages, parent_id) =
  std.foldl(function(result, package) {
    objItems: result.objItems +
            [
                {
                    index:: result.next_index,
                    "010_HL" : {
                        HL01: std.toString(result.next_index),
                        HL02: std.toString(parent_id),
                        HL03: "P",
                    },
                    "190_MAN" : [{
                        MAN01 : "GM",
                        MAN02 : package.ZBARCOD.BARFULL
                    }],
                }
            ] + flattenItems(if (std.isArray(package.E1EDL44)) then
                             package.E1EDL44 else [package.E1EDL44], result.next_index).objItems,
    next_index: self.objItems[std.length(self.objItems) - 1].index + 1
  },
  packages,
  {
    objItems: [],
    next_index: parent_id + 1
  }
);

local flattenShipments(shipments) =
  std.foldl(
    function(result, shipment)
        local flattenedOrders = flattenOrders(if (std.isArray(shipment.E1EDL24)) then
                                              shipment.E1EDL24 else [shipment.E1EDL24],
                                              result.next_index).objItems;
        {
            objItems: result.objItems +
              [
                 {
                    index:: result.next_index,
                    "010_HL" : {
                        HL01: std.toString(result.next_index),
                        HL03: "S"
                    },
                    "110_TD1": [
                        {
                            TD101: "PLT90",
                            TD102: std.parseInt(shipment.ANZPK),
                            TD106: "G",
                            TD108: "LB"
                        }
                    ],
                    "120_TD5" : [{
                        TD504 : "M",
                        TD505 : "COMC"
                    }],
                    "130_TD3" : [{
                        TD301 : "TL",
                        TD303: "998432"
                    }],
                    "150_REF" : [{
                        REF01 : "VR",
                        REF02 : "8432"
                    }],
                    "151_PER": [
                        {
                            PER01: "DI",
                            PER02: vE1ADRM1.NAME1,
                            PER03: "TE",
                            PER04: vE1ADRM1.TELEPHONE1
                        }
                        for vE1ADRM1 in shipment.E1ADRM1
                        if (vE1ADRM1.PARTNER_Q == "OSO")
                    ],
                    "200_DTM" : [
                        {
                            DTM01 : "011",
                            DTM02: vE1EDT13.NTANF
                        }
                        for vE1EDT13 in shipment.E1EDT13
                        if vE1EDT13.QUALF == "006"
                    ],
                    "220_N1_Loop" : [{
                        "220_N1" : {
                            N101 : "ST",
                            N103 : "9",
                            N104 : vE1ADRM1.E1ADRE1.EXTEND_D
                        }
                        }
                        for vE1ADRM1 in shipment.E1ADRM1
                        if vE1ADRM1.PARTNER_Q == "WE"
                    ]
                 }
              ] + flattenedOrders +
                  flattenPackages(if (std.isArray(shipment.E1EDL37)) then
                                  shipment.E1EDL37 else [shipment.E1EDL37],
                                  std.parseInt(flattenedOrders[std.length(flattenedOrders) - 1]["010_HL"].HL01)).objItems,
    next_index: self.objItems[std.length(self.objItems) - 1].index + 1
  },
  shipments,
  {
    objItems: [],
    next_index: 1
  }
);

local ediShipments = if (std.isArray(payload.ZDELVRY03_620.IDOC.E1EDL20)) then
                      payload.ZDELVRY03_620.IDOC.E1EDL20 else
                      [payload.ZDELVRY03_620.IDOC.E1EDL20];

local nowString = DS.LocalDateTime.now();
local nowDateTime = DS.LocalDateTime.format(nowString, "yyyy-MM-dd'T'HH:mm:ss.SSS", "d MMM uuuu");

local mappingResult = {
    Heading: {
        "020_BSN": {
            BSN01: "00",
            BSN02: payload.ZDELVRY03_620.IDOC.E1EDL20.VBELN,
            BSN03: nowDateTime,
            BSN04: nowDateTime,
        }
    },
    Detail: {
        "010_HL_Loop": flattenShipments(ediShipments).objItems
    },
    Summary: {
        "010_CTT": {
            CTT01: 2
        }
    }
};

mappingResult
